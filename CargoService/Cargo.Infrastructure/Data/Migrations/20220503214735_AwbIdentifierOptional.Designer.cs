// <auto-generated />
using System;
using Cargo.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cargo.Infrastructure.Data.Migrations
{
    [DbContext(typeof(CargoContext))]
    [Migration("20220503214735_AwbIdentifierOptional")]
    partial class AwbIdentifierOptional
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Agent", b =>
                {
                    b.Property<int>("ContragentId")
                        .HasColumnType("int");

                    b.Property<string>("IataCargoAgentCassAddress")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("IataCargoAgentCassAddress");

                    b.Property<string>("IataCargoAgentNumericCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("IataCargoAgentNumericCode");

                    b.Property<string>("ParticipantIdentifier")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("ParticipantIdentifier");

                    b.HasKey("ContragentId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.AircraftType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BaseType")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("BaseType");

                    b.Property<string>("IataCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Iata");

                    b.Property<string>("IcaoCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("Icao");

                    b.Property<string>("InternationalName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("InternationalName");

                    b.Property<bool?>("IsCargo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsCargo");

                    b.Property<int>("MaxGrossCapacity")
                        .HasColumnType("int")
                        .HasColumnName("MaxGrossCapacity");

                    b.Property<int>("MaxGrossPayload")
                        .HasColumnType("int")
                        .HasColumnName("MaxGrossPayload");

                    b.Property<int>("MaxTakeOffWeight")
                        .HasColumnType("int")
                        .HasColumnName("MaxTakeOffWeight");

                    b.Property<int>("Oew")
                        .HasColumnType("int")
                        .HasColumnName("Oew");

                    b.Property<string>("RussianName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RussianName");

                    b.HasKey("Id");

                    b.ToTable("AircraftTypes");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Airline", b =>
                {
                    b.Property<int>("ContragentId")
                        .HasColumnType("int");

                    b.Property<string>("IataCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("Iata");

                    b.Property<string>("IcaoCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Icao");

                    b.Property<string>("PrefixAwb")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("PrefixAwb");

                    b.HasKey("ContragentId");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Awb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AcPrefix")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("AcPrefix");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Destination");

                    b.Property<string>("ForwardingAgent")
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("ForwardingAgent");

                    b.Property<int?>("ForwardingAgentId")
                        .HasColumnType("int")
                        .HasColumnName("ForwardingAgentId");

                    b.Property<string>("ManifestDescriptionOfGoods")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ManifestDescriptionOfGoods");

                    b.Property<int>("NumberOfPieces")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfPieces");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Origin");

                    b.Property<string>("QuanDetShipmentDescriptionCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("QuanDetShipmentDescriptionCode");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("SerialNumber");

                    b.Property<string>("SpecialHandlingRequirements")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SpecialHandlingRequirements");

                    b.Property<string>("SpecialServiceRequest")
                        .HasMaxLength(65)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("SpecialServiceRequest");

                    b.Property<decimal>("VolumeAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("VolumeAmount");

                    b.Property<string>("VolumeCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("VolumeCode");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Weight");

                    b.Property<string>("WeightCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("WeightCode");

                    b.HasKey("Id");

                    b.ToTable("Awbs");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AwbId")
                        .HasColumnType("int")
                        .HasColumnName("AwbId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<ulong>("FlightScheduleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("NumberOfPieces")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfPieces");

                    b.Property<int?>("PrevRoutingId")
                        .HasColumnType("int");

                    b.Property<string>("QuanDetShipmentDescriptionCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("QuanDetShipmentDescriptionCode");

                    b.Property<string>("SpaceAllocationCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("SpaceAllocationCode");

                    b.Property<decimal>("VolumeAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("VolumeAmount");

                    b.Property<string>("VolumeCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("VolumeCode");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Weight");

                    b.Property<string>("WeightCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("WeightCode");

                    b.HasKey("Id");

                    b.HasIndex("AwbId");

                    b.HasIndex("FlightScheduleId");

                    b.HasIndex("PrevRoutingId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.ContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactIdentifier")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("ContactIdentifier");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("ContactNumber");

                    b.Property<int>("ContragentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContragentId");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Contragent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("AccountNumber");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.Property<string>("DomesticName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("DomesticName");

                    b.Property<string>("Inn")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("Inn");

                    b.Property<string>("InternationalName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("InternationalName");

                    b.Property<string>("Kpp")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Kpp");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Login");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Pass");

                    b.Property<string>("Place")
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("Place");

                    b.Property<string>("PlaceRus")
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("PlaceRus");

                    b.Property<string>("PostCode")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("PostCode");

                    b.Property<string>("RussianName")
                        .HasMaxLength(230)
                        .HasColumnType("varchar(230)")
                        .HasColumnName("RussianName");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("StateProvince");

                    b.Property<string>("StateProvinceRus")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("StateProvinceRus");

                    b.Property<string>("StreetAddressName")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("StreetAddressName");

                    b.Property<string>("StreetAddressNameRus")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("StreetAddressNameRus");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Contragents");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Alpha2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("Alpha2");

                    b.Property<string>("Alpha3")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Alpha3");

                    b.Property<string>("EnglishShortName")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("varchar(130)")
                        .HasColumnName("EnglishShortName");

                    b.Property<string>("Numeric3")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("RussianName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("RussianName");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.IataLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("CityName");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Code");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("MetropolitanAreaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Name");

                    b.Property<string>("RussianName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("RussianName");

                    b.Property<TimeSpan>("TimeZone")
                        .HasColumnType("time(6)")
                        .HasColumnName("TimeZone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("MetropolitanAreaId");

                    b.ToTable("IataLocations");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.MyFlight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Agreement")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Agreement");

                    b.Property<string>("Airline")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("Airline");

                    b.Property<DateTime>("DateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateAt");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateTo");

                    b.HasKey("Id");

                    b.ToTable("MyFlights");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.MyFlightNumbers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BeginNum")
                        .HasColumnType("int")
                        .HasColumnName("BeginNum");

                    b.Property<int?>("EndNum")
                        .HasColumnType("int")
                        .HasColumnName("EndNum");

                    b.Property<int>("MyFlightsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MyFlightsId");

                    b.ToTable("MyFlightNumbers");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.MyFlightRoutes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Destination")
                        .HasColumnType("longtext")
                        .HasColumnName("Destination");

                    b.Property<int>("MyFlightsId")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .HasColumnType("longtext")
                        .HasColumnName("Origin");

                    b.HasKey("Id");

                    b.HasIndex("MyFlightsId");

                    b.ToTable("MyFlightRoutes");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.AircraftQuote", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Volume");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Weight");

                    b.HasKey("Id");

                    b.ToTable("AircraftQuotes");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.Carrier", b =>
                {
                    b.Property<string>("AirlineDesignator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CreationDate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CreationTime")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CreatorReference")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DuplicateAirlineDesignatorMarker")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ElectronicTicketingInformation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GeneralInformation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InFlightServiceInformation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PeriodOfScheduleValidityFrom")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PeriodOfScheduleValidityTo")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReleaseDate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ScheduleStatus")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Season")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TimeMode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TitleOfData")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.ToTable("Carriers");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.Flight", b =>
                {
                    b.Property<string>("AdepIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdepTerminal")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdepUtcOffset")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdesIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdesTerminal")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdesUtcOffset")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftConfiguration")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftOwner")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftRotationLayover")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftTypeIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AirlineDesignator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank3")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CabinCrewEmployer")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CockpitCrewEmployer")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodeSharing")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DateVariation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DaysOfOperation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FlightDate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FlightNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FlightTransitLayower")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FrequencyRate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ItineraryVariation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ItineraryVariationOverflow")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("JointOperation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LegSequence")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MealService")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MinimumConnectingTimeStatus")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OnwardFlightNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OnwardFlightOperatorIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OnwardOperationSuffix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OperationalSuffix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PassengerSta")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PassengerStd")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PeriodFrom")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PeriodTo")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Prbd")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("STA")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("STD")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecureFlightIndicator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TrafficRestrictionCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TrafficRestrictionCodeLeg")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.FlightLeg", b =>
                {
                    b.Property<string>("AdepIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdepTerminal")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdepUtcOffset")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdesIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdesTerminal")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdesUtcOffset")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftConfiguration")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftOwner")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftRotationLayover")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftTypeIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AirlineDesignator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank3")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CabinCrewEmployer")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CockpitCrewEmployer")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodeSharing")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DateVariation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DaysOfOperation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FlightNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FlightTransitLayower")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FrequencyRate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ItineraryVariation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ItineraryVariationOverflow")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("JointOperation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LegSequence")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MealService")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MinimumConnectingTimeStatus")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OnwardFlightNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OnwardFlightOperatorIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OnwardOperationSuffix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OperationalSuffix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PassengerSta")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PassengerStd")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PeriodFrom")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PeriodTo")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Prbd")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("STA")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("STD")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecureFlightIndicator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TrafficRestrictionCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TrafficRestrictionCodeLeg")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.ToTable("FlightLegs");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.FlightShedule", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("AircraftRegistration")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AircraftType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("FlightDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<ulong>("ProcentId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("QuoteFactId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("QuotePlanId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("SHR")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StDestination")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StOrigin")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcentId");

                    b.HasIndex("QuoteFactId");

                    b.HasIndex("QuotePlanId");

                    b.ToTable("FlightShedules");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.Header", b =>
                {
                    b.Property<string>("Blank1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DataSetSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumberOfSeasons")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TitleOfContent")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.ToTable("Headers");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.SegmentData", b =>
                {
                    b.Property<string>("AirlineDesignator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BoardPoint")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BoardPointIndicator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Data")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DataElementIdentifier")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FlightNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ItineraryVariationIdentifier")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ItineraryVariationIdentifierOverflow")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LegSequenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OffPoint")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OffPointIndicator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OperationalSuffix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.ToTable("SegmentDatas");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.Trailer", b =>
                {
                    b.Property<string>("AirlineDesignator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContinuationEndCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReleaseDate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SerialNumberCheckReference")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.ToTable("Trailers");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Shr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("ShrCode");

                    b.Property<string>("ForbShrGroupIata")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ForbShrGroupIata");

                    b.Property<string>("InternationalDescr")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("NameEn");

                    b.Property<string>("RecomendedShr")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RecShr");

                    b.Property<string>("RussianDescr")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NameRu");

                    b.Property<string>("ShrGroup")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ShrGroup");

                    b.HasKey("Id");

                    b.ToTable("Shrs");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Agent", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Contragent", "Contragent")
                        .WithOne("SalesAgent")
                        .HasForeignKey("Cargo.Infrastructure.Data.Model.Agent", "ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contragent");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Airline", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Contragent", "Contragent")
                        .WithOne("Carrier")
                        .HasForeignKey("Cargo.Infrastructure.Data.Model.Airline", "ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contragent");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Booking", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Awb", "Awb")
                        .WithMany("Bookings")
                        .HasForeignKey("AwbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Data.Model.Schedule.FlightShedule", "FlightSchedule")
                        .WithMany()
                        .HasForeignKey("FlightScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Data.Model.Booking", "PrevRouting")
                        .WithMany("NextRoutings")
                        .HasForeignKey("PrevRoutingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Awb");

                    b.Navigation("FlightSchedule");

                    b.Navigation("PrevRouting");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.ContactDetail", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Contragent", "Contragent")
                        .WithMany("ContactDetails")
                        .HasForeignKey("ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contragent");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Contragent", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Country", "Country")
                        .WithMany("Contragents")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.IataLocation", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Country", "Country")
                        .WithMany("Locations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Data.Model.IataLocation", "MetropolitanArea")
                        .WithMany("Airports")
                        .HasForeignKey("MetropolitanAreaId");

                    b.Navigation("Country");

                    b.Navigation("MetropolitanArea");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.MyFlightNumbers", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.MyFlight", "MyFlights")
                        .WithMany("MyFlightsNumbers")
                        .HasForeignKey("MyFlightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyFlights");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.MyFlightRoutes", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.MyFlight", "MyFlights")
                        .WithMany("MyFlightsRoutes")
                        .HasForeignKey("MyFlightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyFlights");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.FlightShedule", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Schedule.AircraftQuote", "Procent")
                        .WithMany()
                        .HasForeignKey("ProcentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Data.Model.Schedule.AircraftQuote", "QuoteFact")
                        .WithMany()
                        .HasForeignKey("QuoteFactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Data.Model.Schedule.AircraftQuote", "QuotePlan")
                        .WithMany()
                        .HasForeignKey("QuotePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procent");

                    b.Navigation("QuoteFact");

                    b.Navigation("QuotePlan");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Awb", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Booking", b =>
                {
                    b.Navigation("NextRoutings");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Contragent", b =>
                {
                    b.Navigation("Carrier");

                    b.Navigation("ContactDetails");

                    b.Navigation("SalesAgent");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Country", b =>
                {
                    b.Navigation("Contragents");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.IataLocation", b =>
                {
                    b.Navigation("Airports");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.MyFlight", b =>
                {
                    b.Navigation("MyFlightsNumbers");

                    b.Navigation("MyFlightsRoutes");
                });
#pragma warning restore 612, 618
        }
    }
}
