// <auto-generated />
using System;
using Cargo.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cargo.Infrastructure.Data.Migrations
{
    [DbContext(typeof(CargoContext))]
    [Migration("20220522124803_ChangeAgentRubr")]
    partial class ChangeAgentRubr
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("IataLocationTariffGroup", b =>
                {
                    b.Property<int>("AirportsId")
                        .HasColumnType("int");

                    b.Property<int>("TariffGroupsId")
                        .HasColumnType("int");

                    b.HasKey("AirportsId", "TariffGroupsId");

                    b.HasIndex("TariffGroupsId");

                    b.ToTable("TariffGroupAirport");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Agent", b =>
                {
                    b.Property<int>("ContragentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Email");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Fax");

                    b.Property<string>("IataCargoAgentCassAddress")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("IataCargoAgentCassAddress");

                    b.Property<string>("IataCargoAgentNumericCode")
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("IataCargoAgentNumericCode");

                    b.Property<string>("ImpCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ImpCode");

                    b.Property<string>("KosudCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("KosudCode");

                    b.Property<string>("ParticipantIdentifier")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("ParticipantIdentifier");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Phone");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Remarks");

                    b.HasKey("ContragentId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.AircraftType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BaseType")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("BaseType");

                    b.Property<string>("IataCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Iata");

                    b.Property<string>("IcaoCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("Icao");

                    b.Property<string>("InternationalName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("InternationalName");

                    b.Property<bool?>("IsCargo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsCargo");

                    b.Property<int>("MaxGrossCapacity")
                        .HasColumnType("int")
                        .HasColumnName("MaxGrossCapacity");

                    b.Property<int>("MaxGrossPayload")
                        .HasColumnType("int")
                        .HasColumnName("MaxGrossPayload");

                    b.Property<int>("MaxTakeOffWeight")
                        .HasColumnType("int")
                        .HasColumnName("MaxTakeOffWeight");

                    b.Property<int>("Oew")
                        .HasColumnType("int")
                        .HasColumnName("Oew");

                    b.Property<string>("RussianName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RussianName");

                    b.HasKey("Id");

                    b.ToTable("AircraftTypes");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Airline", b =>
                {
                    b.Property<int>("ContragentId")
                        .HasColumnType("int");

                    b.Property<string>("IataCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("Iata");

                    b.Property<string>("IcaoCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Icao");

                    b.Property<string>("PrefixAwb")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("PrefixAwb");

                    b.HasKey("ContragentId");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Awb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AcPrefix")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("AcPrefix");

                    b.Property<int>("AgentId")
                        .HasColumnType("int")
                        .HasColumnName("AgentId");

                    b.Property<decimal>("ChargeWeight")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("ChargeWeight");

                    b.Property<ulong?>("ConsigneeId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("ConsigneeId");

                    b.Property<ulong?>("ConsignorId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("ConsignorId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Currency");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Destination");

                    b.Property<string>("ForwardingAgent")
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("ForwardingAgent");

                    b.Property<int?>("ForwardingAgentId")
                        .HasColumnType("int")
                        .HasColumnName("ForwardingAgentId");

                    b.Property<string>("ManifestDescriptionOfGoods")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ManifestDescriptionOfGoods");

                    b.Property<string>("ManifestDescriptionOfGoodsRu")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ManifestDescriptionOfGoodsRu");

                    b.Property<string>("NCV")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Ncv");

                    b.Property<string>("NDV")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Ndv");

                    b.Property<int>("NumberOfPieces")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfPieces");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Origin");

                    b.Property<string>("PlaceOfIssue")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PlaceOfIssue");

                    b.Property<ulong?>("PoolAwbNumId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("PoolAwbNumId");

                    b.Property<string>("QuanDetShipmentDescriptionCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("QuanDetShipmentDescriptionCode");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("SerialNumber");

                    b.Property<string>("SpecialHandlingRequirements")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SpecialHandlingRequirements");

                    b.Property<string>("SpecialServiceRequest")
                        .HasMaxLength(65)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("SpecialServiceRequest");

                    b.Property<string>("SpecialServiceRequestRu")
                        .HasMaxLength(65)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("SpecialServiceRequestRu");

                    b.Property<decimal>("VolumeAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("VolumeAmount");

                    b.Property<string>("VolumeCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("VolumeCode");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Weight");

                    b.Property<string>("WeightCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("WeightCode");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ConsigneeId");

                    b.HasIndex("ConsignorId");

                    b.HasIndex("PoolAwbNumId");

                    b.ToTable("Awbs");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.AwbContragent", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("AddressEn")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("AddressEn");

                    b.Property<string>("AddressRu")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("AddressRu");

                    b.Property<string>("AgentCass")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("AgentCass");

                    b.Property<string>("CityEn")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CityEn");

                    b.Property<string>("CityRu")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("CityRu");

                    b.Property<string>("CodeEn")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("CodeEn");

                    b.Property<string>("CountryISO")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("CountryISO");

                    b.Property<string>("Email")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Email");

                    b.Property<string>("Fax")
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("Fax");

                    b.Property<string>("IataCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("IataCode");

                    b.Property<string>("NameEn")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("NameEn");

                    b.Property<string>("NameExEn")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NameExEn");

                    b.Property<string>("NameExRu")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NameExRu");

                    b.Property<string>("NameRu")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("NameRu");

                    b.Property<string>("Passport")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Passport");

                    b.Property<string>("Phone")
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("Phone");

                    b.Property<string>("RegionEn")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("RegionEn");

                    b.Property<string>("RegionRu")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("RegionRu");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("AwbContragents");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AwbId")
                        .HasColumnType("int")
                        .HasColumnName("AwbId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<ulong>("FlightScheduleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("NumberOfPieces")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfPieces");

                    b.Property<int?>("PrevRoutingId")
                        .HasColumnType("int");

                    b.Property<string>("QuanDetShipmentDescriptionCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("QuanDetShipmentDescriptionCode");

                    b.Property<string>("SpaceAllocationCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("SpaceAllocationCode");

                    b.Property<decimal>("VolumeAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("VolumeAmount");

                    b.Property<string>("VolumeCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("VolumeCode");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Weight");

                    b.Property<string>("WeightCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("WeightCode");

                    b.HasKey("Id");

                    b.HasIndex("AwbId");

                    b.HasIndex("FlightScheduleId");

                    b.HasIndex("PrevRoutingId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.ContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactIdentifier")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("ContactIdentifier");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("ContactNumber");

                    b.Property<int>("ContragentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContragentId");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.ContactInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<string>("Email1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Email1");

                    b.Property<string>("Email2")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Email2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("FullName");

                    b.Property<string>("Phone1")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone1");

                    b.Property<string>("Phone2")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone2");

                    b.Property<string>("Position")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Position");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("ContactInformations");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Contragent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("AccountNumber");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.Property<string>("DomesticName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("DomesticName");

                    b.Property<string>("Inn")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("Inn");

                    b.Property<string>("InternationalName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("InternationalName");

                    b.Property<bool>("IsPhysic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsPhysic");

                    b.Property<string>("Kpp")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Kpp");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("Login");

                    b.Property<string>("NameEngAdditional")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NameEngAdditional");

                    b.Property<string>("NameRusAdditional")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NameRusAdditional");

                    b.Property<string>("OGRN")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("OGRN");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Pass");

                    b.Property<string>("Place")
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("Place");

                    b.Property<string>("PlaceRus")
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)")
                        .HasColumnName("PlaceRus");

                    b.Property<string>("PostCode")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("PostCode");

                    b.Property<string>("RussianName")
                        .HasMaxLength(230)
                        .HasColumnType("varchar(230)")
                        .HasColumnName("RussianName");

                    b.Property<string>("StateCode")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("StateCode");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("StateProvince");

                    b.Property<string>("StateProvinceRus")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("StateProvinceRus");

                    b.Property<string>("StreetAddressName")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("StreetAddressName");

                    b.Property<string>("StreetAddressNameRus")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("StreetAddressNameRus");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Contragents");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Alpha2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("Alpha2");

                    b.Property<string>("Alpha3")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Alpha3");

                    b.Property<string>("EnglishShortName")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("varchar(130)")
                        .HasColumnName("EnglishShortName");

                    b.Property<string>("Numeric3")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("RussianName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("RussianName");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.AirportContactInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Email1");

                    b.Property<string>("Email2")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Email2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("FullName");

                    b.Property<int>("IataLocationId")
                        .HasColumnType("int");

                    b.Property<string>("Phone1")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone1");

                    b.Property<string>("Phone2")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone2");

                    b.Property<string>("Position")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Position");

                    b.HasKey("Id");

                    b.HasIndex("IataLocationId");

                    b.ToTable("AirportContactInformations");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AlphabeticCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("AlphabeticCode");

                    b.Property<string>("DigitalCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DigitalCode");

                    b.Property<string>("NameEng")
                        .HasColumnType("longtext")
                        .HasColumnName("NameEng");

                    b.Property<string>("NameRus")
                        .HasColumnType("longtext")
                        .HasColumnName("NameRus");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.IataLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("CityName");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Code");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("MetropolitanAreaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Name");

                    b.Property<string>("RussianName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("RussianName");

                    b.Property<TimeSpan>("TimeZone")
                        .HasColumnType("time(6)")
                        .HasColumnName("TimeZone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("MetropolitanAreaId");

                    b.ToTable("IataLocations");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.IataLocationExtInfo", b =>
                {
                    b.Property<int>("IataLocationId")
                        .HasColumnType("int");

                    b.Property<string>("CityRusName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CityRusName");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Remarks");

                    b.Property<TimeSpan>("TimeZoneSummer")
                        .HasColumnType("time(6)")
                        .HasColumnName("TimeZoneSummer");

                    b.Property<TimeSpan>("TimeZoneWinter")
                        .HasColumnType("time(6)")
                        .HasColumnName("TimeZoneWinter");

                    b.HasKey("IataLocationId");

                    b.ToTable("IataLocationExtInfos");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.SlaProhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Export")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Export");

                    b.Property<int>("IataLocationId")
                        .HasColumnType("int");

                    b.Property<bool>("Import")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Import");

                    b.Property<string>("MvlVvl")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MvlVvl");

                    b.Property<string>("Shr")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("Shr");

                    b.Property<bool>("Transfer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Transfer");

                    b.Property<bool>("Transit")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Transit");

                    b.Property<string>("Type")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("IataLocationId");

                    b.ToTable("SlaProhibitions");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.SlaTimeLimitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IataLocationId")
                        .HasColumnType("int");

                    b.Property<string>("MvlVvl")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MvlVvl");

                    b.Property<string>("Shr")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("Shr");

                    b.Property<int>("Time")
                        .HasColumnType("int")
                        .HasColumnName("Time");

                    b.Property<string>("Type")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("IataLocationId");

                    b.ToTable("SlaTimeLimitations");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.TariffGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Code");

                    b.Property<string>("DescriptionEng")
                        .HasColumnType("longtext")
                        .HasColumnName("DescriptionEng");

                    b.Property<string>("DescriptionRus")
                        .HasColumnType("longtext")
                        .HasColumnName("DescriptionRus");

                    b.HasKey("Id");

                    b.ToTable("TariffGroups");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.TelexSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Emails")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Emails");

                    b.Property<int>("IataLocationId")
                        .HasColumnType("int");

                    b.Property<string>("OffsetBase")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("OffsetBase");

                    b.Property<int?>("OffsetValue")
                        .HasColumnType("int")
                        .HasColumnName("OffsetValue");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("IataLocationId");

                    b.ToTable("TelexSettings");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Rates.RateGridHeader", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasComment("ID and primary key of a rate grid.");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasComment("Rate grid's code/name. Must be an English(10) unique string.");

                    b.Property<DateTime>("Ver")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasComment("Row's timestamp.");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "IX_RateGridHeaders1")
                        .IsUnique();

                    b.ToTable("RateGridHeaders");

                    b
                        .HasComment("Contains all read grid headers.");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Rates.RateGridRank", b =>
                {
                    b.Property<ulong>("GridId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("GrdId")
                        .HasComment("Reference to grid's header.");

                    b.Property<uint>("Rank")
                        .HasColumnType("int unsigned")
                        .HasComment("Grid's rank. Must be greater than or equal to zero.");

                    b.Property<DateTime>("Ver")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasComment("Row's timestamp.");

                    b.HasKey("GridId", "Rank")
                        .HasName("PK_RateGridRanks");

                    b.ToTable("RateGridRanks");

                    b
                        .HasComment("Contains rank specifications of all rate grids.");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Rates.TransProduct", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasComment("ID and primary key of a product.");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasComment("Product's code. Must be an English string.");

                    b.Property<ulong>("DescriptionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("DescId")
                        .HasComment("Reference to description resource.");

                    b.Property<string>("Trigger")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasComment("Product's trigger.");

                    b.Property<DateTime>("Ver")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasComment("Row's timestamp.");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex(new[] { "Code" }, "IX_TransProducts1")
                        .IsUnique();

                    b.HasIndex(new[] { "Trigger" }, "IX_TransProducts2")
                        .IsUnique();

                    b.ToTable("TransProducts");

                    b
                        .HasComment("Contains all transportation products supported by the system.");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.AircraftQuote", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Volume");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Weight");

                    b.HasKey("Id");

                    b.ToTable("AircraftQuotes");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.Carrier", b =>
                {
                    b.Property<string>("AirlineDesignator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CreationDate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CreationTime")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CreatorReference")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DuplicateAirlineDesignatorMarker")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ElectronicTicketingInformation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GeneralInformation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InFlightServiceInformation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PeriodOfScheduleValidityFrom")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PeriodOfScheduleValidityTo")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReleaseDate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ScheduleStatus")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Season")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TimeMode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TitleOfData")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.ToTable("Carriers");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.Flight", b =>
                {
                    b.Property<string>("AdepIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdepTerminal")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdepUtcOffset")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdesIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdesTerminal")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdesUtcOffset")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftConfiguration")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftOwner")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftRotationLayover")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftTypeIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AirlineDesignator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank3")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CabinCrewEmployer")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CockpitCrewEmployer")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodeSharing")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DateVariation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DaysOfOperation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FlightDate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FlightNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FlightTransitLayower")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FrequencyRate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ItineraryVariation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ItineraryVariationOverflow")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("JointOperation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LegSequence")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MealService")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MinimumConnectingTimeStatus")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OnwardFlightNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OnwardFlightOperatorIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OnwardOperationSuffix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OperationalSuffix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PassengerSta")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PassengerStd")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PeriodFrom")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PeriodTo")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Prbd")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("STA")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("STD")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecureFlightIndicator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TrafficRestrictionCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TrafficRestrictionCodeLeg")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.FlightLeg", b =>
                {
                    b.Property<string>("AdepIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdepTerminal")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdepUtcOffset")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdesIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdesTerminal")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdesUtcOffset")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftConfiguration")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftOwner")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftRotationLayover")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AircraftTypeIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AirlineDesignator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank3")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CabinCrewEmployer")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CockpitCrewEmployer")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodeSharing")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DateVariation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DaysOfOperation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FlightNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FlightTransitLayower")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FrequencyRate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ItineraryVariation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ItineraryVariationOverflow")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("JointOperation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LegSequence")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MealService")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MinimumConnectingTimeStatus")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OnwardFlightNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OnwardFlightOperatorIata")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OnwardOperationSuffix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OperationalSuffix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PassengerSta")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PassengerStd")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PeriodFrom")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PeriodTo")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Prbd")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("STA")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("STD")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecureFlightIndicator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TrafficRestrictionCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TrafficRestrictionCodeLeg")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.ToTable("FlightLegs");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.FlightShedule", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("AircraftRegistration")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AircraftType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("FlightDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<ulong>("ProcentId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("QuoteFactId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("QuotePlanId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("SHR")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StDestination")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StOrigin")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcentId");

                    b.HasIndex("QuoteFactId");

                    b.HasIndex("QuotePlanId");

                    b.ToTable("FlightShedules");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.Header", b =>
                {
                    b.Property<string>("Blank1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DataSetSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumberOfSeasons")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TitleOfContent")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.ToTable("Headers");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.SegmentData", b =>
                {
                    b.Property<string>("AirlineDesignator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BoardPoint")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BoardPointIndicator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Data")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DataElementIdentifier")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FlightNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ItineraryVariationIdentifier")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ItineraryVariationIdentifierOverflow")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LegSequenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OffPoint")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OffPointIndicator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OperationalSuffix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.ToTable("SegmentDatas");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.Trailer", b =>
                {
                    b.Property<string>("AirlineDesignator")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Blank2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContinuationEndCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecordSerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ReleaseDate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SerialNumberCheckReference")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.ToTable("Trailers");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Session", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("ContragentId")
                        .HasColumnType("int")
                        .HasColumnName("ContragentId");

                    b.Property<string>("ContragentName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ContragentName");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("IsCarrier")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsCarrier");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Login");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Settings.AgentContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateAt");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateTo");

                    b.Property<int>("SaleAgentId")
                        .HasColumnType("int")
                        .HasColumnName("SaleAgentId");

                    b.Property<string>("SalesChannel")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("SalesChannel");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("SaleAgentId");

                    b.ToTable("AgentsContracts");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Settings.AgentContractPoolAwb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("Carrier");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateClose")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateClose");

                    b.Property<DateTime>("DateOpen")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateOpen");

                    b.Property<int>("PoolLenght")
                        .HasColumnType("int")
                        .HasColumnName("PoolLenght");

                    b.Property<int>("StartNumber")
                        .HasMaxLength(7)
                        .HasColumnType("int")
                        .HasColumnName("StartNumber");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("AgentsContractPoolAwbs");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Settings.AgentContractPoolAwbNums", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("AwbPoolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreateDate");

                    b.Property<int>("SerialNumber")
                        .HasMaxLength(7)
                        .HasColumnType("int")
                        .HasColumnName("SerialNumber");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("AwbPoolId");

                    b.ToTable("AgentsContractPoolAwbNums");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Shared.NlsLanguage", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasComment("ID and primary key of an NLS language.");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasComment("NLS language code. Must be a 3-char English mnemonic. Required. For language management.");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasComment("NLS language name. Must be an English name. Optional. For language management.");

                    b.Property<DateTime>("Ver")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasComment("Row's timestamp.");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "IX_NlsLanguages1")
                        .IsUnique();

                    b.ToTable("NlsLanguages");

                    b
                        .HasComment("Contains all NLS languages supported by the system.");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Shared.NlsResource", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasComment("ID and primary key of an NLS resource.");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasComment("Resource code/identifier for user-friendly referencing with certain kinds of admin consoles (resource management).");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("Desc")
                        .HasComment("Optional resource description for user-friendly resource management.");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("Resource type such as string, image, huge text, etc...");

                    b.Property<DateTime>("Ver")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasComment("Row's timestamp.");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "IX_NlsResources1")
                        .IsUnique();

                    b.ToTable("NlsResources");

                    b
                        .HasComment("Contains all NLS resources of all types supported by the system.");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Shared.NlsStringResource", b =>
                {
                    b.Property<ulong>("LanguageId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("LanId")
                        .HasComment("Reference to NLS language.");

                    b.Property<ulong>("ResourceId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("RscId")
                        .HasComment("Reference to NLS resource.");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasComment("Actual NLS string/text.");

                    b.Property<DateTime>("Ver")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasComment("Row's timestamp.");

                    b.HasKey("LanguageId", "ResourceId")
                        .HasName("PK_NlsStringResources");

                    b.HasIndex("ResourceId");

                    b.ToTable("NlsStringResources");

                    b
                        .HasComment("Contains all string-type NLS resources supported by the system.");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Shr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("ShrCode");

                    b.Property<string>("ForbShrGroupIata")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ForbShrGroupIata");

                    b.Property<string>("InternationalDescr")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("NameEn");

                    b.Property<string>("RecomendedShr")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RecShr");

                    b.Property<string>("RussianDescr")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NameRu");

                    b.Property<string>("ShrGroup")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ShrGroup");

                    b.HasKey("Id");

                    b.ToTable("Shrs");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.SizeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AwbId")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("double")
                        .HasColumnName("Height");

                    b.Property<double>("Lenght")
                        .HasColumnType("double")
                        .HasColumnName("Lenght");

                    b.Property<int>("Pieces")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasColumnType("double")
                        .HasColumnName("Width");

                    b.HasKey("Id");

                    b.HasIndex("AwbId");

                    b.ToTable("SizeGroups");
                });

            modelBuilder.Entity("ShrTransProduct", b =>
                {
                    b.Property<ulong>("ProductsId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("ShCodesId")
                        .HasColumnType("int");

                    b.HasKey("ProductsId", "ShCodesId");

                    b.HasIndex("ShCodesId");

                    b.ToTable("ShrTransProduct");
                });

            modelBuilder.Entity("IataLocationTariffGroup", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Dictionary.IataLocation", null)
                        .WithMany()
                        .HasForeignKey("AirportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Data.Model.Dictionary.TariffGroup", null)
                        .WithMany()
                        .HasForeignKey("TariffGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Agent", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Contragent", "Contragent")
                        .WithOne("SalesAgent")
                        .HasForeignKey("Cargo.Infrastructure.Data.Model.Agent", "ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contragent");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Airline", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Contragent", "Contragent")
                        .WithOne("Carrier")
                        .HasForeignKey("Cargo.Infrastructure.Data.Model.Airline", "ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contragent");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Awb", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Contragent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Data.Model.AwbContragent", "Consignee")
                        .WithMany()
                        .HasForeignKey("ConsigneeId");

                    b.HasOne("Cargo.Infrastructure.Data.Model.AwbContragent", "Consignor")
                        .WithMany()
                        .HasForeignKey("ConsignorId");

                    b.HasOne("Cargo.Infrastructure.Data.Model.Settings.AgentContractPoolAwbNums", "PoolAwbNum")
                        .WithMany()
                        .HasForeignKey("PoolAwbNumId");

                    b.Navigation("Agent");

                    b.Navigation("Consignee");

                    b.Navigation("Consignor");

                    b.Navigation("PoolAwbNum");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Booking", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Awb", "Awb")
                        .WithMany("Bookings")
                        .HasForeignKey("AwbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Data.Model.Schedule.FlightShedule", "FlightSchedule")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Data.Model.Booking", "PrevRouting")
                        .WithMany("NextRoutings")
                        .HasForeignKey("PrevRoutingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Awb");

                    b.Navigation("FlightSchedule");

                    b.Navigation("PrevRouting");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.ContactDetail", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Contragent", "Contragent")
                        .WithMany("ContactDetails")
                        .HasForeignKey("ContragentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contragent");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.ContactInformation", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Agent", "Agent")
                        .WithMany("AdditionalContactInfo")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Contragent", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Country", "Country")
                        .WithMany("Contragents")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.AirportContactInformation", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Dictionary.IataLocationExtInfo", "IataLocationExtInfo")
                        .WithMany("AdditionalContactInfo")
                        .HasForeignKey("IataLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IataLocationExtInfo");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.IataLocation", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Country", "Country")
                        .WithMany("Locations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Data.Model.Dictionary.IataLocation", "MetropolitanArea")
                        .WithMany("Airports")
                        .HasForeignKey("MetropolitanAreaId");

                    b.Navigation("Country");

                    b.Navigation("MetropolitanArea");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.IataLocationExtInfo", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Dictionary.IataLocation", "IataLocation")
                        .WithOne("IataLocationExtInfo")
                        .HasForeignKey("Cargo.Infrastructure.Data.Model.Dictionary.IataLocationExtInfo", "IataLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IataLocation");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.SlaProhibition", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Dictionary.IataLocationExtInfo", "IataLocationExtInfo")
                        .WithMany("SlaProhibitions")
                        .HasForeignKey("IataLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IataLocationExtInfo");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.SlaTimeLimitation", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Dictionary.IataLocationExtInfo", "IataLocationExtInfo")
                        .WithMany("SlaTimeLimitations")
                        .HasForeignKey("IataLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IataLocationExtInfo");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.TelexSetting", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Dictionary.IataLocationExtInfo", "IataLocationExtInfo")
                        .WithMany("TelexSettings")
                        .HasForeignKey("IataLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IataLocationExtInfo");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Rates.RateGridRank", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Rates.RateGridHeader", "Grid")
                        .WithMany("Ranks")
                        .HasForeignKey("GridId")
                        .HasConstraintName("FK_RateGridRanks1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grid");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Rates.TransProduct", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Shared.NlsResource", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId")
                        .HasConstraintName("FK_TransProducts1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Description");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.FlightShedule", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Schedule.AircraftQuote", "Procent")
                        .WithMany()
                        .HasForeignKey("ProcentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Data.Model.Schedule.AircraftQuote", "QuoteFact")
                        .WithMany()
                        .HasForeignKey("QuoteFactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Data.Model.Schedule.AircraftQuote", "QuotePlan")
                        .WithMany()
                        .HasForeignKey("QuotePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procent");

                    b.Navigation("QuoteFact");

                    b.Navigation("QuotePlan");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Settings.AgentContract", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Agent", "SaleAgent")
                        .WithMany("AgentContracts")
                        .HasForeignKey("SaleAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleAgent");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Settings.AgentContractPoolAwb", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Settings.AgentContract", "Contract")
                        .WithMany("PoolAwbs")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Settings.AgentContractPoolAwbNums", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Settings.AgentContractPoolAwb", "AwbPool")
                        .WithMany("UsedAwbNumbers")
                        .HasForeignKey("AwbPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwbPool");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Shared.NlsStringResource", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Shared.NlsLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_NlsStringResources1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Data.Model.Shared.NlsResource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FK_NlsStringResources2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.SizeGroup", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Awb", "Awb")
                        .WithMany("SizeGroups")
                        .HasForeignKey("AwbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Awb");
                });

            modelBuilder.Entity("ShrTransProduct", b =>
                {
                    b.HasOne("Cargo.Infrastructure.Data.Model.Rates.TransProduct", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cargo.Infrastructure.Data.Model.Shr", null)
                        .WithMany()
                        .HasForeignKey("ShCodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Agent", b =>
                {
                    b.Navigation("AdditionalContactInfo");

                    b.Navigation("AgentContracts");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Awb", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("SizeGroups");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Booking", b =>
                {
                    b.Navigation("NextRoutings");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Contragent", b =>
                {
                    b.Navigation("Carrier");

                    b.Navigation("ContactDetails");

                    b.Navigation("SalesAgent");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Country", b =>
                {
                    b.Navigation("Contragents");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.IataLocation", b =>
                {
                    b.Navigation("Airports");

                    b.Navigation("IataLocationExtInfo");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Dictionary.IataLocationExtInfo", b =>
                {
                    b.Navigation("AdditionalContactInfo");

                    b.Navigation("SlaProhibitions");

                    b.Navigation("SlaTimeLimitations");

                    b.Navigation("TelexSettings");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Rates.RateGridHeader", b =>
                {
                    b.Navigation("Ranks");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Schedule.FlightShedule", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Settings.AgentContract", b =>
                {
                    b.Navigation("PoolAwbs");
                });

            modelBuilder.Entity("Cargo.Infrastructure.Data.Model.Settings.AgentContractPoolAwb", b =>
                {
                    b.Navigation("UsedAwbNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
